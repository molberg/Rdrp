// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getClassHeader
SEXP getClassHeader(SEXP filename);
RcppExport SEXP Rdrp_getClassHeader(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(getClassHeader(filename));
    return rcpp_result_gen;
END_RCPP
}
// readClass
SEXP readClass(SEXP filename, SEXP H);
RcppExport SEXP Rdrp_readClass(SEXP filenameSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(readClass(filename, H));
    return rcpp_result_gen;
END_RCPP
}
// getFreq
NumericMatrix getFreq(List L);
RcppExport SEXP Rdrp_getFreq(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getFreq(L));
    return rcpp_result_gen;
END_RCPP
}
// frequencies
NumericVector frequencies(List S, NumericVector v);
RcppExport SEXP Rdrp_frequencies(SEXP SSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(frequencies(S, v));
    return rcpp_result_gen;
END_RCPP
}
// velocities
NumericVector velocities(List S);
RcppExport SEXP Rdrp_velocities(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(velocities(S));
    return rcpp_result_gen;
END_RCPP
}
// getVelo
NumericMatrix getVelo(List L);
RcppExport SEXP Rdrp_getVelo(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getVelo(L));
    return rcpp_result_gen;
END_RCPP
}
// getData
NumericMatrix getData(List L);
RcppExport SEXP Rdrp_getData(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getData(L));
    return rcpp_result_gen;
END_RCPP
}
// getDimension
IntegerVector getDimension(List L);
RcppExport SEXP Rdrp_getDimension(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getDimension(L));
    return rcpp_result_gen;
END_RCPP
}
// average
List average(List L);
RcppExport SEXP Rdrp_average(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(average(L));
    return rcpp_result_gen;
END_RCPP
}
// foo
List foo(List S);
RcppExport SEXP Rdrp_foo(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(foo(S));
    return rcpp_result_gen;
END_RCPP
}
// fold
List fold(List S, double ft, bool shift);
RcppExport SEXP Rdrp_fold(SEXP SSEXP, SEXP ftSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type ft(ftSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(fold(S, ft, shift));
    return rcpp_result_gen;
END_RCPP
}
// reverse
List reverse(List S);
RcppExport SEXP Rdrp_reverse(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse(S));
    return rcpp_result_gen;
END_RCPP
}
// area
double area(List S, LogicalVector mask);
RcppExport SEXP Rdrp_area(SEXP SSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(area(S, mask));
    return rcpp_result_gen;
END_RCPP
}
// moment
DataFrame moment(List S, LogicalVector mask);
RcppExport SEXP Rdrp_moment(SEXP SSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(moment(S, mask));
    return rcpp_result_gen;
END_RCPP
}
// trim
List trim(List S, IntegerVector keep);
RcppExport SEXP Rdrp_trim(SEXP SSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(trim(S, keep));
    return rcpp_result_gen;
END_RCPP
}
// sieve
List sieve(List S, NumericVector coeffs);
RcppExport SEXP Rdrp_sieve(SEXP SSEXP, SEXP coeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coeffs(coeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(sieve(S, coeffs));
    return rcpp_result_gen;
END_RCPP
}
// resample
List resample(List S, NumericVector f, bool smooth);
RcppExport SEXP Rdrp_resample(SEXP SSEXP, SEXP fSEXP, SEXP smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(resample(S, f, smooth));
    return rcpp_result_gen;
END_RCPP
}
// rescale
List rescale(List S, double factor, double bias);
RcppExport SEXP Rdrp_rescale(SEXP SSEXP, SEXP factorSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    Rcpp::traits::input_parameter< double >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(rescale(S, factor, bias));
    return rcpp_result_gen;
END_RCPP
}
// mask
LogicalVector mask(List S, NumericVector limits);
RcppExport SEXP Rdrp_mask(SEXP SSEXP, SEXP limitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type limits(limitsSEXP);
    rcpp_result_gen = Rcpp::wrap(mask(S, limits));
    return rcpp_result_gen;
END_RCPP
}
// getZeros
arma::vec getZeros(int n);
RcppExport SEXP Rdrp_getZeros(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getZeros(n));
    return rcpp_result_gen;
END_RCPP
}
// fooData
arma::mat fooData(Rcpp::List L);
RcppExport SEXP Rdrp_fooData(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(fooData(L));
    return rcpp_result_gen;
END_RCPP
}
// smooft
SEXP smooft(Rcpp::List S);
RcppExport SEXP Rdrp_smooft(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(smooft(S));
    return rcpp_result_gen;
END_RCPP
}
