// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getClassHeader
SEXP getClassHeader(SEXP filename);
RcppExport SEXP _Rdrp_getClassHeader(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(getClassHeader(filename));
    return rcpp_result_gen;
END_RCPP
}
// readClass
SEXP readClass(SEXP filename, SEXP H);
RcppExport SEXP _Rdrp_readClass(SEXP filenameSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(readClass(filename, H));
    return rcpp_result_gen;
END_RCPP
}
// getFreq
NumericMatrix getFreq(List L);
RcppExport SEXP _Rdrp_getFreq(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getFreq(L));
    return rcpp_result_gen;
END_RCPP
}
// frequencies
NumericVector frequencies(List S, NumericVector v);
RcppExport SEXP _Rdrp_frequencies(SEXP SSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(frequencies(S, v));
    return rcpp_result_gen;
END_RCPP
}
// velocities
NumericVector velocities(List S);
RcppExport SEXP _Rdrp_velocities(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(velocities(S));
    return rcpp_result_gen;
END_RCPP
}
// getVelo
NumericMatrix getVelo(List L);
RcppExport SEXP _Rdrp_getVelo(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getVelo(L));
    return rcpp_result_gen;
END_RCPP
}
// getData
NumericMatrix getData(List L);
RcppExport SEXP _Rdrp_getData(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getData(L));
    return rcpp_result_gen;
END_RCPP
}
// getDimension
IntegerVector getDimension(List L);
RcppExport SEXP _Rdrp_getDimension(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getDimension(L));
    return rcpp_result_gen;
END_RCPP
}
// average
List average(List L);
RcppExport SEXP _Rdrp_average(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(average(L));
    return rcpp_result_gen;
END_RCPP
}
// foo
List foo(List S);
RcppExport SEXP _Rdrp_foo(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(foo(S));
    return rcpp_result_gen;
END_RCPP
}
// fold
List fold(List S, double ft, bool shift);
RcppExport SEXP _Rdrp_fold(SEXP SSEXP, SEXP ftSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type ft(ftSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(fold(S, ft, shift));
    return rcpp_result_gen;
END_RCPP
}
// reverse
List reverse(List S);
RcppExport SEXP _Rdrp_reverse(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse(S));
    return rcpp_result_gen;
END_RCPP
}
// area
double area(List S, LogicalVector mask);
RcppExport SEXP _Rdrp_area(SEXP SSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(area(S, mask));
    return rcpp_result_gen;
END_RCPP
}
// moment
DataFrame moment(List S, LogicalVector mask);
RcppExport SEXP _Rdrp_moment(SEXP SSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(moment(S, mask));
    return rcpp_result_gen;
END_RCPP
}
// trim
List trim(List S, IntegerVector keep);
RcppExport SEXP _Rdrp_trim(SEXP SSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(trim(S, keep));
    return rcpp_result_gen;
END_RCPP
}
// sieve
List sieve(List S, NumericVector coeffs);
RcppExport SEXP _Rdrp_sieve(SEXP SSEXP, SEXP coeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coeffs(coeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(sieve(S, coeffs));
    return rcpp_result_gen;
END_RCPP
}
// resample
List resample(List S, NumericVector f, bool smooth);
RcppExport SEXP _Rdrp_resample(SEXP SSEXP, SEXP fSEXP, SEXP smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(resample(S, f, smooth));
    return rcpp_result_gen;
END_RCPP
}
// rescale
List rescale(List S, double factor, double bias);
RcppExport SEXP _Rdrp_rescale(SEXP SSEXP, SEXP factorSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    Rcpp::traits::input_parameter< double >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(rescale(S, factor, bias));
    return rcpp_result_gen;
END_RCPP
}
// mask
LogicalVector mask(List S, NumericVector limits);
RcppExport SEXP _Rdrp_mask(SEXP SSEXP, SEXP limitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type limits(limitsSEXP);
    rcpp_result_gen = Rcpp::wrap(mask(S, limits));
    return rcpp_result_gen;
END_RCPP
}
// getHeaderColumn
SEXP getHeaderColumn(SEXP L, SEXP index);
RcppExport SEXP _Rdrp_getHeaderColumn(SEXP LSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(getHeaderColumn(L, index));
    return rcpp_result_gen;
END_RCPP
}
// getHead
SEXP getHead(SEXP L);
RcppExport SEXP _Rdrp_getHead(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(getHead(L));
    return rcpp_result_gen;
END_RCPP
}
// getOdinSpectrum
SEXP getOdinSpectrum(SEXP filename);
RcppExport SEXP _Rdrp_getOdinSpectrum(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(getOdinSpectrum(filename));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rdrp_getClassHeader", (DL_FUNC) &_Rdrp_getClassHeader, 1},
    {"_Rdrp_readClass", (DL_FUNC) &_Rdrp_readClass, 2},
    {"_Rdrp_getFreq", (DL_FUNC) &_Rdrp_getFreq, 1},
    {"_Rdrp_frequencies", (DL_FUNC) &_Rdrp_frequencies, 2},
    {"_Rdrp_velocities", (DL_FUNC) &_Rdrp_velocities, 1},
    {"_Rdrp_getVelo", (DL_FUNC) &_Rdrp_getVelo, 1},
    {"_Rdrp_getData", (DL_FUNC) &_Rdrp_getData, 1},
    {"_Rdrp_getDimension", (DL_FUNC) &_Rdrp_getDimension, 1},
    {"_Rdrp_average", (DL_FUNC) &_Rdrp_average, 1},
    {"_Rdrp_foo", (DL_FUNC) &_Rdrp_foo, 1},
    {"_Rdrp_fold", (DL_FUNC) &_Rdrp_fold, 3},
    {"_Rdrp_reverse", (DL_FUNC) &_Rdrp_reverse, 1},
    {"_Rdrp_area", (DL_FUNC) &_Rdrp_area, 2},
    {"_Rdrp_moment", (DL_FUNC) &_Rdrp_moment, 2},
    {"_Rdrp_trim", (DL_FUNC) &_Rdrp_trim, 2},
    {"_Rdrp_sieve", (DL_FUNC) &_Rdrp_sieve, 2},
    {"_Rdrp_resample", (DL_FUNC) &_Rdrp_resample, 3},
    {"_Rdrp_rescale", (DL_FUNC) &_Rdrp_rescale, 3},
    {"_Rdrp_mask", (DL_FUNC) &_Rdrp_mask, 2},
    {"_Rdrp_getHeaderColumn", (DL_FUNC) &_Rdrp_getHeaderColumn, 2},
    {"_Rdrp_getHead", (DL_FUNC) &_Rdrp_getHead, 1},
    {"_Rdrp_getOdinSpectrum", (DL_FUNC) &_Rdrp_getOdinSpectrum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rdrp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
